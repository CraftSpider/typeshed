import tkinter
from typing import Any, Dict, List, Optional, Tuple
from typing_extensions import Literal

WINDOW: Literal["window"]
TEXT: Literal["text"]
STATUS: Literal["status"]
IMMEDIATE: Literal["immediate"]
IMAGE: Literal["image"]
IMAGETEXT: Literal["imagetext"]
BALLOON: Literal["balloon"]
AUTO: Literal["auto"]
ACROSSTOP: Literal["acrosstop"]

ASCII: Literal["ascii"]
CELL: Literal["cell"]
COLUMN: Literal["column"]
DECREASING: Literal["decreasing"]
INCREASING: Literal["increasing"]
INTEGER: Literal["integer"]
MAIN: Literal["main"]
MAX: Literal["max"]
REAL: Literal["real"]
ROW: Literal["row"]
S_REGION: Literal["s-region"]
X_REGION: Literal["x-region"]
Y_REGION: Literal["y-region"]

TCL_DONT_WAIT: Literal[2]
TCL_WINDOW_EVENTS: Literal[4]
TCL_FILE_EVENTS: Literal[8]
TCL_TIMER_EVENTS: Literal[16]
TCL_IDLE_EVENTS: Literal[32]
TCL_ALL_EVENTS: Literal[0]

class tixCommand: ...

class Tk(tkinter.Tk, tixCommand):
    def __init__(self, screenName: Optional[str] = ..., baseName: Optional[str] = ..., className: str = ...): ...

class TixWidget(tkinter.Widget):
    def __init__(
        self,
        master: Optional[tkinter.Misc] = ...,
        widgetName: Optional[str] = ...,
        static_options: Optional[List[str]] = ...,
        cnf: Dict[str, Any] = ...,
        kw: Dict[str, Any] = ...,
    ) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def set_silent(self, value: str) -> None: ...
    def subwidget(self, name: str) -> tkinter.Widget: ...
    def subwidgets_all(self) -> List[tkinter.Widget]: ...
    def config_all(self, option: Any, value: Any) -> None: ...
    def image_create(
        self, imgtype: str, cnf: Dict[str, Any] = ..., master: Optional[tkinter.Widget] = ..., **kw: Any
    ) -> None: ...
    def image_delete(self, imgname: str) -> None: ...

class TixSubWidget(TixWidget):
    def __init__(
        self, master: tkinter.Widget, name: str, destroy_physically: int = ..., check_intermediate: int = ...
    ) -> None: ...

class DisplayStyle:
    def __init__(
        self, itemtype: str, cnf: Dict[str, Any] = ..., *, master: Optional[tkinter.Widget] = ..., **kw: Any
    ) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def delete(self) -> None: ...
    def config(self, cnf: Dict[str, Any] = ..., **kw: Any) -> Any: ...

class Balloon(TixWidget):
    def __init__(self, master: Optional[tkinter.Widget] = ..., cnf: Dict[str, Any] = ..., **kw: Any) -> None: ...
    def bind_widget(self, widget: tkinter.Widget, cnf: Dict[str, Any] = ..., **kw: Any) -> None: ...
    def unbind_widget(self, widget: tkinter.Widget) -> None: ...

class ButtonBox(TixWidget):
    def __init__(self, master: Optional[tkinter.Widget] = ..., cnf: Dict[str, Any] = ..., **kw: Any) -> None: ...
    def add(self, name: str, cnf: Dict[str, Any] = ..., **kw: Any) -> tkinter.Widget: ...
    def invoke(self, name: str) -> None: ...

class ComboBox(TixWidget):
    def __init__(self, master: Optional[tkinter.Widget] = ..., cnf: Dict[str, Any] = ..., **kw: Any) -> None: ...
    def add_history(self, str: str) -> None: ...
    def append_history(self, str: str) -> None: ...
    def insert(self, index: int, str: str) -> None: ...
    def pick(self, index: int) -> None: ...

class Control(TixWidget):
    def __init__(self, master: Optional[tkinter.Widget] = ..., cnf: Dict[str, Any] = ..., **kw: Any) -> None: ...
    def decrement(self) -> None: ...
    def increment(self) -> None: ...
    def invoke(self) -> None: ...

class LabelEntry: ...
class LabelFrame: ...
class Meter: ...
class OptionMenu: ...
class PopupMenu: ...
class Select: ...
class StdButtonBox: ...
class DirList: ...
class DirTree: ...
class DirSelectDialog: ...
class DirSelectBox: ...
class ExFileSelectBox: ...
class FileSelectBox: ...
class FileEntry: ...
class HList: ...
class CheckList: ...
class Tree: ...
class TList: ...
class PanedWindow: ...
class ListNoteBook: ...
class NoteBook: ...
class InputOnly: ...

class Form:
    def __setitem__(self, key: str, value: Any) -> None: ...
    def config(self, cnf: Dict[str, Any] = ..., **kw: Any) -> None: ...
    def form(self, cnf: Dict[str, Any] = ..., **kw: Any) -> None: ...
    def check(self) -> bool: ...
    def forget(self) -> None: ...
    def grid(self, xsize: int = ..., ysize: int = ...) -> Optional[Tuple[int, int]]: ...
    def info(self, option: Optional[str] = ...) -> Any: ...
    def slaves(self) -> List[tkinter.Widget]: ...
